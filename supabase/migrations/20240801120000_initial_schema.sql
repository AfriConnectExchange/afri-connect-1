
-- Drop existing functions and triggers if they exist to ensure a clean slate.
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS handle_new_user;
DROP FUNCTION IF EXISTS decrement_product_quantity;
DROP FUNCTION IF EXISTS update_product_rating;
DROP FUNCTION IF EXISTS create_order_with_items;
DROP FUNCTION IF EXISTS get_sales_for_seller;

-- Roles Table: Defines user roles (e.g., Buyer, Seller, Admin).
CREATE TABLE IF NOT EXISTS roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);

-- Profiles Table: Stores public-facing user data.
CREATE TABLE IF NOT EXISTS profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    updated_at TIMESTAMPTZ,
    full_name TEXT,
    avatar_url TEXT,
    phone_number TEXT,
    location TEXT,
    onboarding_completed BOOLEAN DEFAULT FALSE,
    role_id BIGINT REFERENCES roles(id) DEFAULT 1,
    kyc_status TEXT DEFAULT 'incomplete', -- e.g., 'incomplete', 'pending', 'verified', 'rejected'
    language TEXT DEFAULT 'en',
    timezone TEXT DEFAULT 'UTC',
    notifications JSONB
);

-- Categories Table: For organizing products.
CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

-- Products Table: For all marketplace listings.
CREATE TABLE IF NOT EXISTS products (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    seller_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
    currency TEXT NOT NULL DEFAULT 'GBP',
    category_id BIGINT REFERENCES categories(id),
    listing_type TEXT NOT NULL, -- 'sale', 'barter', 'freebie'
    status TEXT NOT NULL DEFAULT 'active', -- 'active', 'sold', 'delisted'
    images TEXT[],
    location_text TEXT,
    quantity_available INT NOT NULL DEFAULT 1,
    average_rating NUMERIC(3, 2) DEFAULT 0.00,
    review_count INT DEFAULT 0,
    specifications JSONB,
    shipping_policy JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- Orders Table: Tracks customer purchases.
CREATE TABLE IF NOT EXISTS orders (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    buyer_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    total_amount NUMERIC(10, 2) NOT NULL,
    currency TEXT NOT NULL DEFAULT 'GBP',
    status TEXT NOT NULL, -- 'processing', 'shipped', 'in-transit', 'out-for-delivery', 'delivered', 'cancelled'
    shipping_address JSONB,
    payment_method TEXT,
    tracking_number TEXT,
    courier_name TEXT,
    estimated_delivery_date TIMESTAMPTZ,
    actual_delivery_date TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- Order Items Table: Links products to orders.
CREATE TABLE IF NOT EXISTS order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE SET NULL,
    seller_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
    quantity INT NOT NULL,
    price_at_purchase NUMERIC(10, 2) NOT NULL
);

-- Reviews Table: For product and seller feedback.
CREATE TABLE IF NOT EXISTS reviews (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    reviewer_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    reviewee_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Notifications Table: For user alerts.
CREATE TABLE IF NOT EXISTS notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    type TEXT NOT NULL, -- 'order', 'barter', 'delivery', 'system', 'payment'
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    link_url TEXT,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Barter Proposals Table: For managing trades.
CREATE TABLE IF NOT EXISTS barter_proposals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    proposer_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    recipient_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
    proposer_product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    recipient_product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    status TEXT NOT NULL DEFAULT 'pending', -- 'pending', 'accepted', 'rejected'
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- Transactions Table: For financial audit trail.
CREATE TABLE IF NOT EXISTS transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    profile_id UUID REFERENCES profiles(id),
    order_id UUID REFERENCES orders(id),
    type TEXT,
    status TEXT,
    provider TEXT,
    amount NUMERIC(10, 2),
    description TEXT,
    metadata JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Escrow Transactions Table: For secure payment handling.
CREATE TABLE IF NOT EXISTS escrow_transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
    amount NUMERIC(10, 2) NOT NULL,
    status TEXT NOT NULL, -- 'funded', 'released', 'refunded', 'disputed'
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ
);

-- Seed Roles Table --
INSERT INTO roles (name) VALUES ('buyer'), ('seller'), ('sme'), ('trainer'), ('admin') ON CONFLICT (name) DO NOTHING;
-- Seed Categories Table --
INSERT INTO categories (name) VALUES ('Fashion'), ('Electronics'), ('Home & Garden'), ('Services'), ('Arts & Crafts'), ('Books & Media'), ('Health & Beauty') ON CONFLICT (name) DO NOTHING;


-- Function to create a user profile when a new user signs up.
CREATE OR REPLACE FUNCTION handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url, phone_number)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    new.phone
  );
  RETURN new;
END;
$$;

-- Trigger to execute the function after a new user is created in auth.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();


-- Function to decrement product quantity after an order.
CREATE OR REPLACE FUNCTION decrement_product_quantity(p_id UUID, p_quantity INT)
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
  UPDATE products
  SET quantity_available = quantity_available - p_quantity
  WHERE id = p_id;
END;
$$;

-- Function to update a product's average rating.
CREATE OR REPLACE FUNCTION update_product_rating(prod_id UUID)
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
  avg_rating NUMERIC;
  review_count INT;
BEGIN
  SELECT AVG(rating), COUNT(id)
  INTO avg_rating, review_count
  FROM reviews
  WHERE product_id = prod_id;

  UPDATE products
  SET
    average_rating = avg_rating,
    review_count = review_count
  WHERE id = prod_id;
END;
$$;

-- Function to create an order and its items atomically
CREATE OR REPLACE FUNCTION create_order_with_items(
    buyer_id_param UUID,
    total_amount_param NUMERIC,
    payment_method_param TEXT,
    shipping_address_param JSONB,
    items JSONB
) RETURNS UUID
LANGUAGE plpgsql
AS $$
DECLARE
    new_order_id UUID;
    item JSONB;
BEGIN
    -- Create the order
    INSERT INTO orders (buyer_id, total_amount, payment_method, shipping_address, status, currency)
    VALUES (buyer_id_param, total_amount_param, payment_method_param, shipping_address_param, 'processing', 'GBP')
    RETURNING id INTO new_order_id;

    -- Create order items
    FOR item IN SELECT * FROM jsonb_array_elements(items)
    LOOP
        INSERT INTO order_items (order_id, product_id, quantity, price_at_purchase, seller_id)
        VALUES (
            new_order_id,
            (item->>'product_id')::UUID,
            (item->>'quantity')::INT,
            (item->>'price')::NUMERIC,
            (item->>'seller_id')::UUID
        );
    END LOOP;

    RETURN new_order_id;
END;
$$;

-- Function to get all sales for a specific seller
CREATE OR REPLACE FUNCTION get_sales_for_seller(p_seller_id UUID)
RETURNS SETOF orders
LANGUAGE sql
STABLE
AS $$
  SELECT o.*
  FROM orders o
  JOIN order_items oi ON o.id = oi.order_id
  WHERE oi.seller_id = p_seller_id
  GROUP BY o.id;
$$;


-- Enable Row Level Security for all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE barter_proposals ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE escrow_transactions ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Profiles
CREATE POLICY "Public profiles are viewable by everyone." ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can insert their own profile." ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON profiles FOR UPDATE USING (auth.uid() = id) WITH CHECK (auth.uid() = id);

-- Roles
CREATE POLICY "Roles are viewable by everyone." ON roles FOR SELECT USING (true);

-- Categories
CREATE POLICY "Categories are viewable by everyone." ON categories FOR SELECT USING (true);

-- Products
CREATE POLICY "Products are viewable by everyone." ON products FOR SELECT USING (true);
CREATE POLICY "Users can create products." ON products FOR INSERT WITH CHECK (auth.uid() = seller_id);
CREATE POLICY "Users can update their own products." ON products FOR UPDATE USING (auth.uid() = seller_id) WITH CHECK (auth.uid() = seller_id);
CREATE POLICY "Users can delete their own products." ON products FOR DELETE USING (auth.uid() = seller_id);

-- Orders & Order Items
CREATE POLICY "Users can view their own orders." ON orders FOR SELECT USING (auth.uid() = buyer_id);
CREATE POLICY "Users can create orders for themselves." ON orders FOR INSERT WITH CHECK (auth.uid() = buyer_id);
CREATE POLICY "Users can view order items for their orders." ON order_items FOR SELECT USING (
  (SELECT buyer_id FROM orders WHERE id = order_items.order_id) = auth.uid() OR
  (order_items.seller_id = auth.uid())
);
CREATE POLICY "Users can update order status if they are the seller." ON orders FOR UPDATE USING (
  id IN (SELECT order_id FROM order_items WHERE seller_id = auth.uid())
);


-- Reviews
CREATE POLICY "Reviews are viewable by everyone." ON reviews FOR SELECT USING (true);
CREATE POLICY "Authenticated users can create reviews." ON reviews FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Notifications
CREATE POLICY "Users can view their own notifications." ON notifications FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can manage their own notifications." ON notifications FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Barter Proposals
CREATE POLICY "Users can view their own barter proposals." ON barter_proposals FOR SELECT USING (auth.uid() = proposer_id OR auth.uid() = recipient_id);
CREATE POLICY "Users can create barter proposals." ON barter_proposals FOR INSERT WITH CHECK (auth.uid() = proposer_id);
CREATE POLICY "Recipients can update proposals." ON barter_proposals FOR UPDATE USING (auth.uid() = recipient_id);

-- Transactions & Escrow
CREATE POLICY "Users can view their own transactions." ON transactions FOR SELECT USING (auth.uid() = profile_id);
CREATE POLICY "Users can view escrow transactions related to their orders." ON escrow_transactions FOR SELECT USING (
  (SELECT buyer_id FROM orders WHERE id = escrow_transactions.order_id) = auth.uid() OR
  EXISTS (SELECT 1 FROM order_items WHERE order_items.order_id = escrow_transactions.order_id AND order_items.seller_id = auth.uid())
);
